def sluggish_octopus(array)
longest = nil
  array.each_with_index do |fish1, idx1|
    array.each_with_index do |fish2, idx2|
      next if idx1 == idx2

      if fish1.length > fish2.length
        longest = fish1
      end

    end
  end
longest
end

def dom(array)

dom_octopus(array).last

end

def dom_octopus(array)
  return array if array.length < 2

  mid = array.length / 2
  left = array.take(mid)
  right = array.drop(mid)

  help_dom(dom_octopus(left), dom_octopus(right))


end

def help_dom(arr1, arr2)

merged = []

until arr1.empty? || arr2.empty?

  if arr1.first.length > arr2.first.length
    merged << arr2.shift
  elsif arr1.first < arr2.first
    merged << arr1.shift
  else
    merged << arr1.shift
  end
end

merged + arr1 + arr2

end


def clever_octopus(array)
longest = nil

array.each do |fish|
  longest = fish if longest == nil
  if fish.length > longest.length
    longest = fish
  end
end

longest
end


def slow_dance(dir, tiles_array)

  array.each_with_index do |direction, idx|
    return idx if direction == dir
  end

end

def fast_dance(dir, tiles_hash)

  tiles_hash[dir]
end 
